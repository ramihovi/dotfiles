" Settings
set nohud
set smoothscroll " use smooth scrolling
set scrollduration = 250 " the duration of smooth scrolling
" set nosmoothscroll
set noautofocus " The opposite of autofocus; this setting stops
                " sites from focusing on an input box when they load
set numerichints " use numbers for link hints instead of a set of characters
set typelinkhints " type text in the link to narrow down numeric hints (numerichints required)
set showtabindices " Display the tab index in the tab’s title

let searchlimit = 30 " the amount of results displayed in the command bar
let scrollstep = 50 " the amount of pixels scrolled when using the scrollUp and scrollDown commands
let barposition = "bottom" " position of the command bar


" let locale = "uk" " Current choices are 'jp' and 'uk'. This allows cVim to use sites like google.co.uk
                    " or google.co.jp to search rather than google.com. Support is currently limited.
                    " Let me know if you need a different locale for one of the completion/search engines
" set langmap = "$#"
" let hintcharacters = "abc123"

" Search engines -- If you leave out the '%s' at the end of the URL, your
" query will be appended to the link. Otherwise, your query will replace the
" '%s' (these are for privoxy redirects).
let searchengine fl = "http://finlex.laki/%s"
let searchengine fh = "http://finlex.he/%s"
let searchengine fo = "http://finlex.ok/%s"
let searchengine el = "http://eurlex/%s"
let searchengine ed = "http://edilex/%s"
let searchengine helka = "http://helka/%s"

""""""""""""""""""""""""""""""""""""""
"""""""""""""""""" Tähän asti tsekattu

" This will do the same thing as above, except typing ':tabnew withbase' into to command bar
" without any search parameters will open 'http://www.dogpile.com'
let searchengine withbase = ["http://www.dogpile.com", "http://www.dogpile.com/search/web?q=%s"]

" alias ':g' to ':tabnew google'
command g tabnew google

let completionengines = ["google", "amazon", "imdb", "dogpile"]

let searchalias g = "google" " Create a shortcut for search engines.
                             " For example, typing ':tabnew g example'
                             " would act the same way as ':tabnew google example'

" Open all of these in a tab with `gnb` or open one of these with <N>goa where <N>
let qmark a = ["http://www.reddit.com", "http://www.google.com", "http://twitter.com"]

let blacklists = ["https://mail.google.com/*", "*://mail.google.com/*", "@https://mail.google.com/mail/*"]
" blacklists prefixed by '@' act as a whitelist

let mapleader = ","

" ===========================================
" MAPPINGS ==================================
"
map <Leader>r reloadTabUncached
map <Leader>x :restore<Space>
map w :open$<Space>

" Browsing
map L goForward
map H goBack

" Moving (in a page)
map J 7scrollDown
map K 7scrollUp
map <C-f> scrollPageDown
map <C-b> scrollPageUp

" Moving (tabs & windows)
map <C-l> nextTab
map <C-h> previousTab
map <C-L> moveTabRight
map <C-H> moveTabLeft
map g0 firstTab
map g# lastTab
map <C-u> rootFrame
map <M-h> previousTab
" You can use <Space>, which is interpreted as a
" literal " " character, to enter buffer completion mode
map gb :buffer<Space>

" Opening & closing
map x closeTab
map gxT closeTabLeft
map gxt closeTabRight
map gx0 closeTabsToLeft
map gx# closeTabsToRight

" Quickmark (mark)
map m setMark
map ' goToMark

" Bookmarks
map <M-b> createBookmark
map <Leader>b createBookmark

" quit
map ZZ quitChrome

" Switch between alphabetical hint characters and numeric hints
map <C-i> :set numerichints!<CR>

iunmap <C-y>
imap <C-m> deleteWord

" Create a variable that can be used/referenced in the command bar
let @@reddit_prog = 'http://www.reddit.com/r/programming'
let @@top_all = 'top?sort=top&t=all'
let @@top_day = 'top?sort=top&t=day'

" TA binding opens 'http://www.reddit.com/r/programming/top?sort=top&t=all' in a new tab
map TA :tabnew @@reddit_prog/@@top_all<CR>
map TD :tabnew @@reddit_prog/@@top_day<CR>

" Use paste buffer in mappings
map T :tabnew wikipedia @"<CR>

" Code blocks (see below for more info)
getIP() -> {{
httpRequest({url: 'http://api.ipify.org/?format=json', json: true},
            function(res) { Status.setMessage('IP: ' + res.ip); });
}}
" Displays your public IP address in the status bar
map ci :call getIP<CR>
map g\¤ :call getIP<CR>

" Script hints
echo(link) -> {{
  alert(link.href);
}}
map <leader>f createScriptHint(echo)

sourceLoadAlert() -> {{
    alert("Config file loaded!");
}}
sourceLoad() -> {{
    :source
}}

"map <leader>s :source<CR>
map <leader>s :source

let configpath = '/home/user/.cvimrc'
set localconfig " Update settings via a local file (and the `:source` command) rather
                " than the default options page in chrome
" As long as localconfig is set in the .cvimrc file. cVim will continue to read
" settings from there
